# Docker Compose file for Family Wiki development environment
# Note: 'version' field is obsolete in Docker Compose V2 and has been removed

services:
  db:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: family_wiki
      POSTGRES_USER: family_wiki_user
      POSTGRES_PASSWORD: family_wiki_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    network_mode: host
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U family_wiki_user -d family_wiki"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    network_mode: host
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  web:
    build: .
    image: family-wiki-web:latest
    ports:
      - "5000:5000"
    network_mode: host
    environment:
      # Flask Configuration
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_ENV=${FLASK_ENV:-development}
      - FLASK_DEBUG=${FLASK_DEBUG:-1}
      - WTF_CSRF_ENABLED=${WTF_CSRF_ENABLED:-True}
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL}
      # Celery Configuration
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      # Ollama Configuration
      - OLLAMA_HOST=${OLLAMA_HOST}
      - OLLAMA_PORT=${OLLAMA_PORT}
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      # Optional configurations
      - BENCHMARK_MODELS=${BENCHMARK_MODELS}
    volumes:
      # Bind mount for development - changes reflect immediately
      - .:/app
      # Preserve node_modules and .venv if they exist
      - /app/node_modules
      - /app/.venv
      # Create volume for uploaded files
      - app_uploads:/app/web_app/pdf_processing/pdfs
      - app_extracted:/app/web_app/pdf_processing/extracted_text
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "./docker/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    # Enable TTY for interactive debugging
    tty: true
    stdin_open: true

  celery-worker:
    build: .
    image: family-wiki-web:latest
    command: celery -A celery_worker.celery worker --loglevel=info
    network_mode: host
    environment:
      # Flask Configuration
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_ENV=${FLASK_ENV:-development}
      - FLASK_DEBUG=${FLASK_DEBUG:-1}
      - WTF_CSRF_ENABLED=${WTF_CSRF_ENABLED:-True}
      # Database Configuration
      - DATABASE_URL=${DATABASE_URL}
      # Celery Configuration
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      # Ollama Configuration
      - OLLAMA_HOST=${OLLAMA_HOST}
      - OLLAMA_PORT=${OLLAMA_PORT}
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      # Optional configurations
      - BENCHMARK_MODELS=${BENCHMARK_MODELS}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.venv
      - app_uploads:/app/web_app/pdf_processing/pdfs
      - app_extracted:/app/web_app/pdf_processing/extracted_text
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local
  app_extracted:
    driver: local
