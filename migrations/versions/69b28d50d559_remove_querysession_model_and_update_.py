"""Remove QuerySession model and update Query model

Revision ID: 69b28d50d559
Revises: 3a08ecab2a05
Create Date: 2025-07-26 09:12:33.665252

"""
import sqlalchemy as sa
from alembic import op


# revision identifiers, used by Alembic.
revision = '69b28d50d559'
down_revision = '3a08ecab2a05'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Check if tables exist before proceeding
    connection = op.get_bind()
    inspector = sa.inspect(connection)

    # Only proceed if both tables exist
    if 'queries' in inspector.get_table_names() and 'query_sessions' in inspector.get_table_names():
        # Update Query table - add corpus_id and prompt_used
        with op.batch_alter_table('queries', schema=None) as batch_op:
            batch_op.add_column(sa.Column('corpus_id', sa.dialects.postgresql.UUID(), nullable=True))
            batch_op.add_column(sa.Column('prompt_used', sa.String(length=255), nullable=True))
            batch_op.create_foreign_key('fk_queries_corpus_id', 'text_corpora', ['corpus_id'], ['id'])

        # Migrate existing data: copy corpus_id from sessions to queries
        connection.execute(sa.text("""
            UPDATE queries 
            SET corpus_id = (
                SELECT corpus_id 
                FROM query_sessions 
                WHERE query_sessions.id = queries.session_id
            )
        """))

        # Make corpus_id non-nullable after data migration
        with op.batch_alter_table('queries', schema=None) as batch_op:
            batch_op.alter_column('corpus_id', nullable=False)

            # Check if the foreign key constraint exists before dropping it
            existing_constraints = [fk['name'] for fk in inspector.get_foreign_keys('queries')]
            if 'fk_queries_session_id' in existing_constraints:
                batch_op.drop_constraint('fk_queries_session_id', type_='foreignkey')
            elif 'queries_session_id_fkey' in existing_constraints:
                batch_op.drop_constraint('queries_session_id_fkey', type_='foreignkey')

            batch_op.drop_column('session_id')

        # Drop the query_sessions table
        op.drop_table('query_sessions')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Recreate query_sessions table
    op.create_table('query_sessions',
        sa.Column('id', sa.dialects.postgresql.UUID(), nullable=False),
        sa.Column('corpus_id', sa.dialects.postgresql.UUID(), nullable=False),
        sa.Column('session_name', sa.String(length=255), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.Column('max_chunks', sa.Integer(), nullable=True),
        sa.Column('similarity_threshold', sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(['corpus_id'], ['text_corpora.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # Add session_id back to queries table
    with op.batch_alter_table('queries', schema=None) as batch_op:
        batch_op.add_column(sa.Column('session_id', sa.dialects.postgresql.UUID(), nullable=True))
        batch_op.create_foreign_key('fk_queries_session_id', 'query_sessions', ['session_id'], ['id'])
        batch_op.drop_constraint('fk_queries_corpus_id', type_='foreignkey')
        batch_op.drop_column('prompt_used')
        batch_op.drop_column('corpus_id')

    # ### end Alembic commands ###
